/* 
explanation...
*/

load Deg2K3RankUpperBound;

Q := Rationals();
R<t> := PolynomialRing(Q);
P4<x0,x1,x2,x3,x4> := ProjectiveSpace(Q,4);
P2<x,y,z> := ProjectiveSpace(Q,2);
RR:=CoordinateRing(P2);
K<a,b>:=FieldOfFractions(PolynomialRing(Rationals(),2));
rank := 22;

while rank ne 2 do
  c:=[];
  flag := false;
  while flag eq false do
    for i in [1..5] do 
      c[i] := Random(-10,10); // can be adjusted
    end for;
    eqpC := t^5+c[1]*t^4+c[2]*t^3+c[3]*t^2+c[4]*t+c[5];
    flag := IsSeparable(eqpC);
  end while;

  pC := HyperellipticCurve(eqpC);
  WP2<xw,yw,zw> := AmbientSpace(pC);
  i := map < WP2 -> P4 | [xw^3, xw^2*zw, xw*zw^2, zw^3, yw] >;
  C := i(pC);
  eqC := Equations(C);
  L3 := LinearSystem(P4,3);
  L3C := LinearSystem(L3,C);
  Sec := Sections(L3C);

  flag:=0;
  while flag eq 0 do
    eqs1:=Random(CartesianPower([eqC[i] : i in [1..4]],2));
    eqs2:=Random(CartesianPower(Sec,2));
    eq1:=eqs1[1]+eqs1[2];
    eq2:=eqs2[1]+eqs2[2];
    X := Scheme(P4,[eq1,eq2]);
    if not IsSingular(X) and Dimension(X) eq 2 then
      flag:=1;
    end if;
  end while;
  assert C subset X;

  DivC := Divisor(X,C);
  LC := RiemannRochBasis(DivC);
  assert IsCoercible(Q,LC[3]);
  pi := map < X -> P2 | [LC[1],LC[2],1] >; // +
  B:=BaseScheme(pi);
  
  XK:=BaseChange(X,K);
  P4K<y0,y1,y2,y3,y4>:=AmbientSpace(XK);

  n1:=Numerator(Evaluate(LC[1],[y0,y1,y2,y3,y4]));
  n2:=Numerator(Evaluate(LC[2],[y0,y1,y2,y3,y4]));
  d1:=Denominator(Evaluate(LC[1],[y0,y1,y2,y3,y4]));
  d2:=Denominator(Evaluate(LC[2],[y0,y1,y2,y3,y4]));
  eqF1:=n1-a*d1;
  eqF2:=n2-b*d2;
  pXF:= XK meet Scheme(P4K,[eqF1,eqF2]);
  XF:=Difference(pXF,Scheme(P4K,Equations(B)));

  cf:=ClearDenominators(Equations(XF)[1]);
  cf1:=MonomialCoefficient(cf,y3^2); 
  cf2:=MonomialCoefficient(cf,y3*y4);
  cf3:=MonomialCoefficient(cf,y4^2);
  
  if cf2 ne 0 then
    D:=cf2^2-4*cf1*cf3;
    fD:=Factorization(Numerator(D));
    for p in fD do
      if Degree(p[1]) eq 6 then
        f:=ClearDenominators(RR!(z^6*Evaluate(p[1],[x/z,y/z])));
      end if;
    end for;
    R:=Deg2K3RankUpperBound(f,20);
    rank := R[1];
  end if;
end while;

"A K3 surface X of degree 6 is found with an involution and Picard rank 2: ";

"The K3 surface X is given by: ";
X;
"The curve C of genus 2 on X, inducing the involution, is given by: ";
C;
"The surface X is a double cover of P2, with the covering map given by :;
pi;
"This map is ramified over the curve defined by: ";
f;
