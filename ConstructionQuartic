/* 
In this file code is found to find a quartic K3 of 
Picard rank 2. We first define three functions, which 
be used in the final code.
The final code that can be runned after defining these 
functions is at the bottom.

----------------------------------------------------------

The function PicNumberMod2(f) calculates an upperbound
for the Picard number of the surface defined over F2 
by a quartic polynomial h. 
This function takes about 50 seconds to run.
*/

function PicNumberMod2(h)  
  P3:=ProjectiveSpace(GF(2),3);
  S:=Scheme(P3,h); // surface
  if IsSingular(S) then
    return(0);
  end if;
  
  Tr:=[]; // make list of points on base change  
          // of scheme S defined over F_2^i 
  for i in [1..10] do
    Tr[i] := #Points(BaseChange(S,GF(2^i))) - 1 - 2^(2*i);
  end for;
  
  R<t>:=PolynomialRing(Rationals(),1);
  cpl := FrobeniusTracesToWeilPolynomials(Tr, 2, 2, 22: 
          KnownFactor := t-2);
  cpl_2 := [wp : wp in cpl | CheckWeilPolynomial(wp,2,1: 
          SurfDeg := 4)];
  // list of possible WeilPolynomials
  // Point counting for bigger fields takes too much time.
  
  pr:=[];
  for i in [1..#cpl_2] do
    pr[i]:=WeilPolynomialToRankBound(cpl_2[i],2);
    // This gives a list of the possible picard numbers  
    // over F2 and hence an upperbound for the surface  
    // defined by h over Q
  end for;
  return(pr);
end function;

/* ----------------------------------------------------

Function FindK3Rank2(n,m)
variables n,m: depends the range of the random interval
of which we search for a random polynomial.
Important remark: choose n < m!

The function FindK3Rank2, searches for a quartic 
surface with Picard rank 2 with a curve C of genus 2 
and degree 5.
It is constructed by taking a random curve with the 
desired properties in P1xP1 and then embedding it 
in P3 via the SegreEmbedding.
The function returns the equation of the curve C 
in P1xP1.
It uses the twisted curve D which is defined in
P1xP1 by the equation 

Time this function takes is between 1 and 10 minutes.
*/

function FindK3Rank2(n,m)
  Q:=RationalField();
  P1xP1<x0,x1,y0,y1>:=ProductProjectiveSpace(Q,[1,1]);
  P3:=ProjectiveSpace(GF(2),3);
  g:=x0^2*y1-x1^2*y0; // curve in P1xP1 needed for 
                      // construction quartic surface
  a:=[]; // make list for coefficients of polynomial f
         // for the curve with desired properties
  r:=23; // checks if rank of quartic surface is 2
  while r ne 2 do
      for i in [1..12] do
          a[i]:=Random([n,m]); // creates random
               // coefficients for polynomial f
               // bound can be adjusted
          if a eq [0,0,0,0,0,0,0,0,0,0,0,0] then
              a[1]:=1; // make sure that f is not the 
                       // zero polynomial
          end if;
      end for;
      f:=y0^3*(a[1]*x0^2+a[2]*x0*x1+a[3]*x1^2)
        +y0^2*y1*(a[4]*x0^2+a[5]*x0*x1+a[6]*x1^2)
        +y0*y1^2*(a[7]*x0^2+a[8]*x0*x1+a[9]*x1^2)
        +y1^3*(a[10]*x0^2+a[11]*x0*x1+a[12]*x1^2);
      if IsNonsingular(Scheme(P1xP1,f)) eq true then
        CD:=Scheme(P1xP1,f*g); // Union of curves 
                              // defined by f and g. 
        CDim<x,y,z,w>:=SegreEmbedding(CD); 
                // This curve CD embeds in a quartic
                // surface which is given by one of the 
                // defining equations, which apparently 
                // is the second equation
        h:=DefiningEquations(CDim)[2];
        S:=Scheme(P3,h); // quartic surface
        if IsNonsingular(S) then
                // if nonsingular, check Pic number
            r:=Max(PicNumberMod2(h)); 
        end if;
      end if;
  end while;
  return(f);
end function;

/* -----------------------------------------------------

Function GiveQuartic:

Starting with a polynomial f,g in k[x0,x1][y0,y1] 
homogeneous of degree (3,2) and (1,2)
it gives back a quartic in P3 and the image of the 
SegreEmbedding of the curves defined by these 
polynomials in P1xP1.

Note that the polynomial f defines a curve of degree 5
and genus 2, so it satisfies the by us desired criteria.
*/

function GiveQuartic(f);
    Q := Rationals();
    P1xP1<x0,x1,y0,y1> := ProductProjectiveSpace(Q,[1,1]);
    C := Scheme(P1xP1,f);
    
    /* We define a curve CD, containing the curve
       C and another curve D, such that its image under 
       the Segre embedding embeds in a quartic.
       Moreover, one of the defining equations of this
       image gives the quartic. */ 
    
    g := x0^2*y1-x1^2*y0;
    D := Scheme(P1xP1,g);
    CD := Union(C,D);
    CDim<x,y,z,w> := SegreEmbedding(CD);  
    h := DefiningEquations(CDim)[2]; // apparently its the
                                     // second equation
    Cim<x,y,z,w> := SegreEmbedding(C);
        // Cim gives image of the curve C on quartic
    eqC := DefiningEquations(Cim);
    Dim<x,y,z,w> := SegreEmbedding(D);
        // Dim gives image of the curve D on quartic
    eqD := DefiningEquations(Dim);
    return(<h,eqC,eqD>);
end function;


/* ----------------------------------------------------

To run this code, we have to do two steps.

Step 1: run FindK3Rank2(n,m) for some integers n<m.
This function can take some time.
Normally between 1 and 10 minutes, but when unlucky
*/

f := FindK3Rank2(0,1);

/* 
Step 2: run GiveQuartic for the polynomial that is 
found in step 1. 
*/

GiveQuartic(f);

/* In our case, in step 1, we found the following f 
defining a curve of degree 5 and genus 2:
R<x0,x1,y0,y1>:=PolynomialRing(Integer,4);
f := x0*x1*y0^3 + x1^2*y0^3 + x0^2*y0*y1^2 + x1^2*y1^3;
GiveQuartic(f); */
