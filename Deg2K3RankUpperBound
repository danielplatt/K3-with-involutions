/*
This function checks whether an irreducible polynomial of
degree at most 22 is cyclotomic or not
*/

function IsCyclotomic(f)
  if not IsIrreducible(f) then
    return false;
  end if;
  if Degree(f) eq 1 then
    if  Eltseq(f) in {[-1,1],[1,1]} then
      return true;
    else
      return false;
    end if;
  end if;
  K<a>:=NumberField(f);
  rs:=Roots(f,K);
  r:=rs[1][1];
  d:=Degree(f);
  for i in [1..4*d] do
    ri:=r^i;
    if ri eq 1 then
      return true;
    end if;
  end for;
  return false;
end function;



/* -------------------------------------------------------

Given a homogeneous polynomial f defining a smooth curve C,
the function returns all the primes p up to B such that the 
reduction of C mod p is smooth */


function Primes(f,B)
  IP2<x,y,z>:=ProjectivePlane(Rationals());
  C:=Curve(IP2, Evaluate(f,[x,y,z]));
  assert IsNonsingular(C);
  ps:=PrimesUpTo(B);
  if ps[1] eq 2 then
    Remove(~ps,1);
  end if; 
  gps:=[];
  for p in ps do
    Cp:=Reduction(C,p);
    if not IsReduced(Cp) then
      Append(~gps,p);
    end if;
  end for;
  return gps;
end function;



/* ---------------------------------------------------------

Given a prime p and a  homogeneous polynomial f with integral 
coefficients defining a smooth sextic curve over IF_p, the 
function below returns the geometric Picard number of the K3 
surface S:w^2=f defined over IF_p; it also returns the 
discriminant of the geometric Picard lattice of S up to squares 
*/

function Deg2PicNumberModp(f,p)
  Rp<x,y,z>:=PolynomialRing(GF(p),3);
  fp:=Rp!Evaluate(f,[x,y,z]);
  assert IsHomogeneous(f);
  R<u>:=PolynomialRing(Rationals());
  wp,wpsing:=WeilPolynomialOfDegree2K3Surface(fp);
  wp:=R!wp;
  fwp:=Factorization(wp);
  ufwp:=[Evaluate(f[1],p*u)/(p^(Degree(f[1]))) : f in fwp];
  ci:=[IsCyclotomic(f) : f in ufwp];
  cfwp:=[<fwp[i][1],fwp[i][2],ci[i]> : i in [1..#ci]];
  tfwp:=[1] cat [f[1]^f[2] : f in cfwp | not f[3]];
  twp:=&*tfwp;
  twp:=R!(Numerator(Evaluate(R!twp,1/u)));
  dp:=SquarefreeFactorization(Abs(Integers()!(p*Evaluate(twp,1/p))));
  rp:=Degree(&*[f[1]^f[2] : f in cfwp |  f[3]]);
  rsingp:=Degree(wpsing);
  return(<rp,rsingp,dp>);
end function;


/* ---------------------------------------------------------

Given a homogeneous polynomial f of degree 6, and let X be 
the degree 2 K3 surface define by w^2=f.
The function returns an upper bound for X using van Luijk's 
method for all primes of good reductions of X up to B.
It can take long. The bottleneck is the function 
WeilPolynomialOfDegree2K3Surface 
*/ 


function Deg2K3RankUpperBound(f,B)
  ps:=Primes(f,B);
  R<u>:=PolynomialRing(Rationals());
  p:=ps[1];
  resp:=Deg2PicNumberModp(f,p);
  rp:=resp[1];rsingp:=resp[2];dp:=resp[3];
  rhop:=rp+rsingp;
  Remove(~ps,1);
  for p1 in ps do
    resp1:=Deg2PicNumberModp(f,p1);
    rp1:=resp1[1];rsingp1:=resp1[2];dp1:=resp1[3];
    rhop1:=rp1+rsingp1;
    if rhop1 lt rhop then
      rhop:=rhop1; dp:=dp1; p:=p1;
    end if;
    if rhop1 eq rhop and dp1 ne dp then
      return <rhop-1, <p, rhop, dp>, <p1, rhop1, dp1>>;
    end if;
  end for;
  return <rhop,<p, rhop, dp>>;
end function;
